http://www.tangowithdjango.com/book17/ <<<<<<Resource Link
Pages
I. Login Page
	a.)existing users login
		TDL
			1.)Make authentication
			2.)add header for the login page
II. Students Page
	a.) View active classes
	b.) View most popular teachers
	c.) View most popular classes
	d.) view most popular lessons
III.) Professor
	a.) classes that they are teaching
	b.) graph of their likes and dislikes
IV.) Admin
	a.) All pending classes table
	b.) Bar graph of all of the professors likes and dislikes
	c.) Bar Graph of all of the most popular classes
	d.) Bar Graph of all of the most popular lessons

	Make lessons view on the admin
		1.)make a pending list
		2.)and a active list


	admin
		1.) Make a table for all pending classes
		2.) Top 5 Most popular classes with likes --> graph
		3.) Top 5 Most popular professors with likes --> graph
		4.) Make a Professor page to look at a pie graph of their likes/dislikes

	Professor
		1.) Classes they are Teaching
		2.) Amount of students in each class they are teaching
		3.) Classes they are recommended to teach

	Student
		1.) View Top 5 classes
		2.) view top 5 lessons

TDL
    Add like functionality in the pages
	parameterize the class page
		2.likes and dislikes
		3.All of the lessons with add lesson opt
		4.comments
	parameterize the professors page
		1.) show the pie graph of their likes and dislikes
		2.) show the classes they are teaching
	authentication
	    1.) Make professor page personalized for the user.
	comments
	    1.)Let there be comments for  teachers
	    2.)Let there be comments for  lessons
	    3.)Let there be comments for  courses
	admin
	    1.)graphs

	social media integration
        1.)Add facebook and other social links

    Parameterizing_TDL
        1.) In The Models
            a.) add a slug field for lessons, professors and courses
            b.) override the save function to save the slug using the slugify method
            c.) make a default setting option
            d.) migrate

        2.) In Views
            a.) make a function for lesson and course
                that accepts request and slug field parameters
            b.) do a query that will pass the object into the render()
            c.)make an exception that will pass if DoesNotExist

        3.) Template
            a.) Make a template with the embedded
        4.) Parameterised Url Mapping
            a.) make a regex parameter to pass to the view

        5.) Add links using the slug field parameter


    lessonSlugName = models.SlugField(unique=False, default=id)

    def __init__(self, *args, **kwargs):
        super(lesson, self).__init__(*args, **kwargs)
        self.lessonSlugName = slugify(self.lesson_name)
    def __unicode__(self):
        return self.lesson_name